apply plugin: "org.sonarqube"

ext.pullRequest = System.getenv()['CHANGE_ID'] ?: null

sonarqube {
    properties {
        property "sonar.host.url", project.getProperty('sonar.host.url')
        property "sonar.login", project.hasProperty('sonar.login') ? project.getProperty('sonar.login') : null
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.organization", "zowe"
        property "sonar.projectKey", "zowe_zowe-explorer-intellij"
        property "sonar.projectName", "Zowe Explorer plug-in for IntelliJ IDEA"
        property "sonar.projectVersion", project.version
        property "sonar.language", "kotlin"
        property "sonar.links.scm", "https://github.com/zowe/zowe-explorer-intellij"
        property "sonar.links.ci", System.getenv()['BUILD_URL'] ?: null
        property "sonar.core.codeCoveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/kover/report.xml"
        if (pullRequest != null) {
            property "sonar.pullrequest.key", System.getenv()['CHANGE_ID'] ?: null
            property "sonar.pullrequest.branch", System.getenv()['CHANGE_BRANCH'] ?: null
            property "sonar.pullrequest.base", System.getenv()['CHANGE_TARGET'] ?: null
            property "sonar.github.pullRequest", pullRequest
            property "sonar.github.repository", "zowe/zowe-explorer-intellij"
            property "sonar.github.oauth",  project.hasProperty('sonar.github.oauth') ? project.getProperty('sonar.github.oauth') : null
        } else {
            property "sonar.branch.name", System.getenv()['BRANCH_NAME'] ?: null
        }
    }
}

subprojects {
    sonarqube {
        properties {
            property "sonar.sources", "src/main/kotlin"
            property "sonar.tests", "src/test/kotlin"
            property 'sonar.exclusions', "**/src/IC-231/**, **/src/IC-223/**"
        }
    }
}
